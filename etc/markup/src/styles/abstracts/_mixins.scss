// vertical align el inside parent with fixed height/min-height
// usage
// html - .parent>.child
// scss - @include v-align;
//     or @include v-align(250px);
//     or @include v-align(250px, bottom, before);
//
@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {
  white-space: nowrap;
  text-align: center;

  &:#{$va-pseudo} {
    content: '';
    display: inline-block;
    vertical-align: $va-direction;
    width: 0;
    min-height: $va-height;
  }

  >* {
    white-space: normal;
    display: inline-block;
    vertical-align: $va-direction;
    max-width: 99%;
  }
}

// vertical align a pair of child el inside parent
// usage
// html - .post>.image+.text
// scss - @include v-align-pair(image, text);
//     or @include v-align-pair(image, text, bottom);
//     or @include v-align-pair(image, text, middle, 200px);
//
@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto) {
  display: table;

  .#{$child-name1} {
    display: table-cell;
    vertical-align: $valign;
    width: $width1;
  }

  .#{$child-name2} {
    display: table-cell;
    vertical-align: $valign;
    width: $width2;
  }
}

// vertical align el
// usage: @include vertical-align-el;
//
@mixin vertical-align-el {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// font-smothing
/// @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
  @if $value ==on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}


/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}


/// Creates a visual triangle.
/// Mixin takes ($size, $color, $direction)
/// The $size argument can take one or two values—width height.
/// The $color argument can take one or two
/// values—foreground-color background-color.
///
/// @author http://bourbon.io/docs/#triangle
///
/// $direction:
/// up, down, left, right, up-right, up-left, down-right, down-left
/// @example scss - Usage
///   @include triangle(12px, gray, down);
///   @include triangle(12px 6px, gray blue, up-left);
///
@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color)==2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction ==up) or ($direction ==down) or ($direction ==right) or ($direction ==left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction ==up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    }

    @else if $direction ==right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }

    @else if $direction ==down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    }

    @else if $direction ==left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }

  @else if ($direction ==up-right) or ($direction ==up-left) {
    border-top: $height solid $foreground-color;

    @if $direction ==up-right {
      border-left: $width solid $background-color;
    }

    @else if $direction ==up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction ==down-right) or ($direction ==down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction ==down-right {
      border-left: $width solid $background-color;
    }

    @else if $direction ==down-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction ==inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction ==inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction ==inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }

  @else if ($direction ==inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}


/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: 0.3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: linear) {
  $list: ();

  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }

  transition: $list;
}


/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    opacity: 1;
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &.placeholder {
    @content;
  }
}

/// Font-size px to rem calc
/// @example scss - Usage
/// selector {
///    @include rem-font-size(16px);
/// }

@mixin rem-font-size($px-size) {
  font-size: $px-size;
  font-size: ($px-size / 10px) + rem;
}

//font-face
@mixin font-face($font-name, $font-path, $weight, $style) {
  @font-face {
    font-family: '#{$font-name}';
    src: url('fonts/#{$font-path}.woff2') format('woff'),
    url('fonts/#{$font-path}.woff') format('woff');
    font-weight: $weight;
    font-style: $style;
  }
}

// Button sizes
@mixin button-color($btn-background, $btn-color, $btn-border, $btn-hover-background, $btn-hover-border, $btn-hover-color) {
  background: $btn-background;
  color: $btn-color;
  border: $btn-border;

  &:hover {
    background: $btn-hover-background;
    color: $btn-hover-bg-color;
    border: $btn-hover-border;
  }
}

@mixin v-center($min-height: 400px) {
  display: flex;

  >* {
    min-height: $min-height;
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 100%;
  }
}

// alignment
@mixin align($align: top) {
	display: inline-block;
	vertical-align: $align;
}

@mixin clear-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

@mixin clearfix {
	&:after{
		clear: both;
		display: block;
		content: "";
	}
}

// aligning center absolute block
@mixin center-vh {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin center-h {
  position: absolute;
  left: 50%;
  transform: translate(-50%, 0);
}

@mixin center-v {
  position: absolute;
  top: 50%;
  transform: translate(0, -50%);
}

// for absolute position block
@mixin absolute($top: 0, $bottom: 0, $left: 0, $right: 0) {
  position: absolute;
  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right
}

// background imege styles
@mixin bg-stretch($alignX: 50%, $alignY: 50%) {
  background-position: $alignX $alignY;
  background-repeat: no-repeat;
  background-size: cover;
}

// object fit for image
@mixin object-fit($fit: cover, $position: center) {
	object-fit: $fit;
	object-position: $position;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 0;
}

// set link styles
@mixin link-inherit($color-hover: $link-hover-color) {
	color: inherit;
	text-decoration: none;

	// &:focus,
	&:hover {
		color: $color-hover;
		opacity: 1;
	}
}

@mixin link-inherit-underline($color-hover: $link-hover-color) {
	color: inherit;
	// text-decoration: none;

	// &:focus,
	&:hover {
		color: $color-hover;
		opacity: 1;
	}
}

@mixin link-inherit-reverse($color-hover: $link-hover-color-alt) {
	color: inherit;
	text-decoration: none;

	&:focus,
	&:hover {
		color: $color-hover;
    opacity: 1;
	}
}

// set link styles
@mixin link-color($color: $info, $color-hover: $body-color) {
	color: $color;
	text-decoration: none;

	&:focus,
	&:hover {
		color: $color-hover;
    opacity: 1;
	}
}

// set link styles
@mixin link-color-underline($color: $info, $color-hover: $base-text-color) {
	color: $color;
	// text-decoration: none;

	&:focus,
	&:hover {
		color: $color-hover;
    opacity: 1;
    text-decoration: none;
	}
}

// insert icon from custom font icomoon
@mixin icon-icomoon($content: "\e906", $font-size: inherit) {
  content: $content;
  font-family: 'icomoon';
  font-size: $font-size;
  line-height: 1;
  text-indent: 0;
}

@mixin scroll-custom($width: 5px, $height: 5px, $scroll-bg: rgba(#fff, 1), $scroll-slider-bg: rgba(#B4B4B4, 1)) {
  ::-webkit-scrollbar {
      width: $width;
      height: $height;
      background: $scroll-bg;
      border-radius: calc(#{$width} / 2);
      margin: 0 6px 0 0;
  }

  ::-webkit-scrollbar-track {
      border-radius: calc(#{$width} / 2);
      // background: url(../images/track.jpg) top center repeat-y;
  }

  ::-webkit-scrollbar-thumb {
      width: $width;
      height: 40px;
      background: $scroll-slider-bg;
      border-radius: calc(#{$width} / 2);
  }
}


@mixin link-hover-bold {
  display: inline-block;
  text-align: center;
  vertical-align: baseline;

  &:after {
    content: attr(data-text);
    color: transparent;
    display: block;
    font-weight: 700;
    height: 1px;
    visibility: hidden;
    overflow: hidden;
    user-select: none;
    pointer-events: none;
    margin-bottom: -1px;

    @media speech {
      display: none;
    }
  }
}

// set z-index to el from heighest to 0
@mixin index-reverse ($max-items) {
  @for $i from 1 through $max-items {
    &:nth-child(#{$i}) {
      z-index:($max-items - $i)
    }
  }
}

// set z-index to el from 1 to heighest
@mixin index ($max-items) {
  @for $i from 1 through $max-items {
    &:nth-child(#{$i}) {
      z-index: $i
    }
  }
}
